From 14d8c0002f5a8855c066e89489d43f0a55f6c08b Mon Sep 17 00:00:00 2001
From: Zhang Rui <bbcallen@gmail.com>
Date: Fri, 8 Jul 2016 12:54:18 +0800
Subject: [PATCH 37/73] ios/VideoToolbox: move VideoToolBoxContext into .m file

---
 .../ijkplayer/ios/pipeline/IJKVideoToolBox.h       |  55 +---------
 .../ijkplayer/ios/pipeline/IJKVideoToolBox.m       | 120 ++++++++++++++++++++-
 .../pipeline/ffpipenode_ios_videotoolbox_vdec.m    |  67 +-----------
 3 files changed, 118 insertions(+), 124 deletions(-)

diff --git a/ios/IJKMediaPlayer/IJKMediaPlayer/ijkmedia/ijkplayer/ios/pipeline/IJKVideoToolBox.h b/ios/IJKMediaPlayer/IJKMediaPlayer/ijkmedia/ijkplayer/ios/pipeline/IJKVideoToolBox.h
index ba35c2d..eaed294 100644
--- a/ios/IJKMediaPlayer/IJKMediaPlayer/ijkmedia/ijkplayer/ios/pipeline/IJKVideoToolBox.h
+++ b/ios/IJKMediaPlayer/IJKMediaPlayer/ijkmedia/ijkplayer/ios/pipeline/IJKVideoToolBox.h
@@ -36,62 +36,11 @@
 #define MAX_PKT_QUEUE_DEEP   350
 #define VTB_MAX_DECODING_SAMPLES 3
 
-
-typedef struct sample_info {
-    int     sample_id;
-
-    double  sort;
-    double  dts;
-    double  pts;
-    int     serial;
-
-    int     sar_num;
-    int     sar_den;
-
-    volatile int is_decoding;
-} sample_info;
-
-typedef struct sort_queue {
-    AVFrame pic;
-    int serial;
-    int64_t sort;
-    volatile struct sort_queue *nextframe;
-} sort_queue;
-
-typedef struct VideoToolBoxContext {
-    FFPlayer                   *ffp;
-    volatile bool               refresh_request;
-    volatile bool               new_seg_flag;
-    volatile bool               idr_based_identified;
-    volatile bool               refresh_session;
-    volatile bool               recovery_drop_packet;
-    VTDecompressionSessionRef   m_vt_session;
-    CMFormatDescriptionRef      m_fmt_desc;
-    pthread_mutex_t             m_queue_mutex;
-    volatile sort_queue        *m_sort_queue;
-    volatile int32_t            m_queue_depth;
-    int32_t                     m_max_ref_frames;
-    bool                        m_convert_bytestream;
-    bool                        m_convert_3byteTo4byteNALSize;
-    int                         serial;
-    bool                        dealloced;
-    int                         m_buffer_deep;
-    AVPacket                    m_buffer_packet[MAX_PKT_QUEUE_DEEP];
-
-    SDL_mutex                  *sample_info_mutex;
-    SDL_cond                   *sample_info_cond;
-    sample_info                 sample_info_array[VTB_MAX_DECODING_SAMPLES];
-    volatile int                sample_info_index;
-    volatile int                sample_info_id_generator;
-    volatile int                sample_infos_in_decoding;
-
-    SDL_SpeedSampler            sampler;
-} VideoToolBoxContext ;
-
+typedef struct VideoToolBoxContext VideoToolBoxContext;
 
 VideoToolBoxContext* init_videotoolbox(FFPlayer* ffp, AVCodecContext* ic);
 
-int videotoolbox_decode_video(VideoToolBoxContext* context, AVCodecContext *avctx, const AVPacket *avpkt,int* got_picture_ptr);
+int videotoolbox_decode_frame(VideoToolBoxContext* context);
 
 void dealloc_videotoolbox(VideoToolBoxContext* context);
 
diff --git a/ios/IJKMediaPlayer/IJKMediaPlayer/ijkmedia/ijkplayer/ios/pipeline/IJKVideoToolBox.m b/ios/IJKMediaPlayer/IJKMediaPlayer/ijkmedia/ijkplayer/ios/pipeline/IJKVideoToolBox.m
index 139de5b..2f4d9d0 100644
--- a/ios/IJKMediaPlayer/IJKMediaPlayer/ijkmedia/ijkplayer/ios/pipeline/IJKVideoToolBox.m
+++ b/ios/IJKMediaPlayer/IJKMediaPlayer/ijkmedia/ijkplayer/ios/pipeline/IJKVideoToolBox.m
@@ -37,6 +37,56 @@
 
 #define IJK_VTB_FCC_AVCC   SDL_FOURCC('C', 'c', 'v', 'a')
 
+typedef struct sample_info {
+    int     sample_id;
+
+    double  sort;
+    double  dts;
+    double  pts;
+    int     serial;
+
+    int     sar_num;
+    int     sar_den;
+
+    volatile int is_decoding;
+} sample_info;
+
+typedef struct sort_queue {
+    AVFrame pic;
+    int serial;
+    int64_t sort;
+    volatile struct sort_queue *nextframe;
+} sort_queue;
+
+struct VideoToolBoxContext {
+    FFPlayer                   *ffp;
+    volatile bool               refresh_request;
+    volatile bool               new_seg_flag;
+    volatile bool               idr_based_identified;
+    volatile bool               refresh_session;
+    volatile bool               recovery_drop_packet;
+    VTDecompressionSessionRef   m_vt_session;
+    CMFormatDescriptionRef      m_fmt_desc;
+    pthread_mutex_t             m_queue_mutex;
+    volatile sort_queue        *m_sort_queue;
+    volatile int32_t            m_queue_depth;
+    int32_t                     m_max_ref_frames;
+    bool                        m_convert_bytestream;
+    bool                        m_convert_3byteTo4byteNALSize;
+    int                         serial;
+    bool                        dealloced;
+    int                         m_buffer_deep;
+    AVPacket                    m_buffer_packet[MAX_PKT_QUEUE_DEEP];
+
+    SDL_mutex                  *sample_info_mutex;
+    SDL_cond                   *sample_info_cond;
+    sample_info                 sample_info_array[VTB_MAX_DECODING_SAMPLES];
+    volatile int                sample_info_index;
+    volatile int                sample_info_id_generator;
+    volatile int                sample_infos_in_decoding;
+
+    SDL_SpeedSampler            sampler;
+};
 
 static const char *vtb_get_error_string(OSStatus status) {
     switch (status) {
@@ -492,7 +542,7 @@ void CreateVTBSession(VideoToolBoxContext* context, int width, int height)
 
 
 
-int videotoolbox_decode_video_internal(VideoToolBoxContext* context, AVCodecContext *avctx, const AVPacket *avpkt, int* got_picture_ptr)
+static int decode_video_internal(VideoToolBoxContext* context, AVCodecContext *avctx, const AVPacket *avpkt, int* got_picture_ptr)
 {
     FFPlayer *ffp                   = context->ffp;
     OSStatus status                 = 0;
@@ -668,7 +718,7 @@ static inline void DuplicatePkt(VideoToolBoxContext* context, const AVPacket* pk
 
 
 
-int videotoolbox_decode_video(VideoToolBoxContext* context, AVCodecContext *avctx, const AVPacket *avpkt, int* got_picture_ptr)
+static int decode_video(VideoToolBoxContext* context, AVCodecContext *avctx, const AVPacket *avpkt, int* got_picture_ptr)
 {
     if (!avpkt || !avpkt->data) {
         return 0;
@@ -702,7 +752,7 @@ int videotoolbox_decode_video(VideoToolBoxContext* context, AVCodecContext *avct
             ff_avpacket_i_or_idr(&context->m_buffer_packet[0], context->idr_based_identified) == true ) {
             for (int i = 0; i < context->m_buffer_deep; i++) {
                 AVPacket* pkt = &context->m_buffer_packet[i];
-                ret = videotoolbox_decode_video_internal(context, avctx, pkt, got_picture_ptr);
+                ret = decode_video_internal(context, avctx, pkt, got_picture_ptr);
             }
         } else {
             context->recovery_drop_packet = true;
@@ -712,7 +762,7 @@ int videotoolbox_decode_video(VideoToolBoxContext* context, AVCodecContext *avct
         context->refresh_session = false;
         return ret;
     }
-    return videotoolbox_decode_video_internal(context, avctx, avpkt, got_picture_ptr);
+    return decode_video_internal(context, avctx, avpkt, got_picture_ptr);
 }
 
 
@@ -810,7 +860,67 @@ void dealloc_videotoolbox(VideoToolBoxContext* context)
     }
 }
 
+int videotoolbox_decode_frame(VideoToolBoxContext* context)
+{
+    FFPlayer *ffp = context->ffp;
+    VideoState *is = ffp->is;
+    Decoder *d = &is->viddec;
+    int got_frame = 0;
+    do {
+        int ret = -1;
+        if (is->abort_request || d->queue->abort_request) {
+            return -1;
+        }
+
+        if (!d->packet_pending || d->queue->serial != d->pkt_serial) {
+            AVPacket pkt;
+            do {
+                if (d->queue->nb_packets == 0)
+                    SDL_CondSignal(d->empty_queue_cond);
+                ffp_video_statistic_l(ffp);
+                if (ffp_packet_queue_get_or_buffering(ffp, d->queue, &pkt, &d->pkt_serial, &d->finished) < 0)
+                    return -1;
+                if (ffp_is_flush_packet(&pkt)) {
+                    avcodec_flush_buffers(d->avctx);
+                    context->refresh_request = true;
+                    context->serial += 1;
+                    d->finished = 0;
+                    ALOGI("flushed last keyframe pts %lld \n",d->pkt.pts);
+                    d->next_pts = d->start_pts;
+                    d->next_pts_tb = d->start_pts_tb;
+                }
+            } while (ffp_is_flush_packet(&pkt) || d->queue->serial != d->pkt_serial);
+
+            av_packet_split_side_data(&pkt);
+
+            av_packet_unref(&d->pkt);
+            d->pkt_temp = d->pkt = pkt;
+            d->packet_pending = 1;
+        }
 
+        ret = decode_video(context, d->avctx, &d->pkt_temp, &got_frame);
+        if (ret < 0) {
+            d->packet_pending = 0;
+        } else {
+            d->pkt_temp.dts =
+            d->pkt_temp.pts = AV_NOPTS_VALUE;
+            if (d->pkt_temp.data) {
+                if (d->avctx->codec_type != AVMEDIA_TYPE_AUDIO)
+                    ret = d->pkt_temp.size;
+                d->pkt_temp.data += ret;
+                d->pkt_temp.size -= ret;
+                if (d->pkt_temp.size <= 0)
+                    d->packet_pending = 0;
+            } else {
+                if (!got_frame) {
+                    d->packet_pending = 0;
+                    d->finished = d->pkt_serial;
+                }
+            }
+        }
+    } while (!got_frame && !d->finished);
+    return got_frame;
+}
 
 VideoToolBoxContext* init_videotoolbox(FFPlayer* ffp, AVCodecContext* avctx)
 {
@@ -829,8 +939,8 @@ VideoToolBoxContext* init_videotoolbox(FFPlayer* ffp, AVCodecContext* avctx)
         goto failed;
     }
 
-    context_vtb->idr_based_identified = true;
     context_vtb->ffp = ffp;
+    context_vtb->idr_based_identified = true;
 #if 0
     switch (profile) {
         case FF_PROFILE_H264_HIGH_10:
diff --git a/ios/IJKMediaPlayer/IJKMediaPlayer/ijkmedia/ijkplayer/ios/pipeline/ffpipenode_ios_videotoolbox_vdec.m b/ios/IJKMediaPlayer/IJKMediaPlayer/ijkmedia/ijkplayer/ios/pipeline/ffpipenode_ios_videotoolbox_vdec.m
index 9b2ba5a..a4a6757 100644
--- a/ios/IJKMediaPlayer/IJKMediaPlayer/ijkmedia/ijkplayer/ios/pipeline/ffpipenode_ios_videotoolbox_vdec.m
+++ b/ios/IJKMediaPlayer/IJKMediaPlayer/ijkmedia/ijkplayer/ios/pipeline/ffpipenode_ios_videotoolbox_vdec.m
@@ -40,70 +40,6 @@ struct IJKFF_Pipenode_Opaque {
     SDL_Thread              _video_fill_thread;
 };
 
-
-
-int decoder_decode_frame_videotoolbox(VideoToolBoxContext* context) {
-
-    FFPlayer *ffp = context->ffp;
-    VideoState *is = ffp->is;
-    Decoder *d = &is->viddec;
-    int got_frame = 0;
-    do {
-        int ret = -1;
-        if (is->abort_request || d->queue->abort_request) {
-            return -1;
-        }
-
-        if (!d->packet_pending || d->queue->serial != d->pkt_serial) {
-            AVPacket pkt;
-            do {
-                if (d->queue->nb_packets == 0)
-                    SDL_CondSignal(d->empty_queue_cond);
-                ffp_video_statistic_l(ffp);
-                if (ffp_packet_queue_get_or_buffering(ffp, d->queue, &pkt, &d->pkt_serial, &d->finished) < 0)
-                    return -1;
-                if (ffp_is_flush_packet(&pkt)) {
-                    avcodec_flush_buffers(d->avctx);
-                    context->refresh_request = true;
-                    context->serial += 1;
-                    d->finished = 0;
-                     ALOGI("flushed last keyframe pts %lld \n",d->pkt.pts);
-                    d->next_pts = d->start_pts;
-                    d->next_pts_tb = d->start_pts_tb;
-                }
-            } while (ffp_is_flush_packet(&pkt) || d->queue->serial != d->pkt_serial);
-
-            av_packet_split_side_data(&pkt);
-
-            av_packet_unref(&d->pkt);
-            d->pkt_temp = d->pkt = pkt;
-            d->packet_pending = 1;
-        }
-
-        ret = videotoolbox_decode_video(context, d->avctx, &d->pkt_temp, &got_frame);
-        if (ret < 0) {
-            d->packet_pending = 0;
-        } else {
-            d->pkt_temp.dts =
-            d->pkt_temp.pts = AV_NOPTS_VALUE;
-            if (d->pkt_temp.data) {
-                if (d->avctx->codec_type != AVMEDIA_TYPE_AUDIO)
-                    ret = d->pkt_temp.size;
-                d->pkt_temp.data += ret;
-                d->pkt_temp.size -= ret;
-                if (d->pkt_temp.size <= 0)
-                    d->packet_pending = 0;
-            } else {
-                if (!got_frame) {
-                    d->packet_pending = 0;
-                    d->finished = d->pkt_serial;
-                }
-            }
-        }
-    } while (!got_frame && !d->finished);
-    return got_frame;
-}
-
 int videotoolbox_video_thread(void *arg)
 {
     IJKFF_Pipenode_Opaque* opaque = (IJKFF_Pipenode_Opaque*) arg;
@@ -111,7 +47,6 @@ int videotoolbox_video_thread(void *arg)
     VideoState *is = ffp->is;
     Decoder   *d = &is->viddec;
     int ret = 0;
-    opaque->context->ffp = ffp;
 
     for (;;) {
 
@@ -119,7 +54,7 @@ int videotoolbox_video_thread(void *arg)
             return -1;
         }
         @autoreleasepool {
-            ret = decoder_decode_frame_videotoolbox(opaque->context);
+            ret = videotoolbox_decode_frame(opaque->context);
         }
         if (ret < 0)
             goto the_end;
-- 
1.9.1

