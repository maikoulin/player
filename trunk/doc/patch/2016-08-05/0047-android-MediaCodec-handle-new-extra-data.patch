From 5fc8be80d75af50ca9c630b46fd76d82ccffff6c Mon Sep 17 00:00:00 2001
From: Zhang Rui <bbcallen@gmail.com>
Date: Tue, 12 Jul 2016 19:02:16 +0800
Subject: [PATCH 47/73] android/MediaCodec: handle new extra data

---
 .../pipeline/ffpipenode_android_mediacodec_vdec.c  | 246 ++++++++++++++-------
 1 file changed, 163 insertions(+), 83 deletions(-)

diff --git a/ijkmedia/ijkplayer/android/pipeline/ffpipenode_android_mediacodec_vdec.c b/ijkmedia/ijkplayer/android/pipeline/ffpipenode_android_mediacodec_vdec.c
index 689b4ed..cade9ab 100644
--- a/ijkmedia/ijkplayer/android/pipeline/ffpipenode_android_mediacodec_vdec.c
+++ b/ijkmedia/ijkplayer/android/pipeline/ffpipenode_android_mediacodec_vdec.c
@@ -92,6 +92,7 @@ typedef struct IJKFF_Pipenode_Opaque {
     SDL_mutex                *acodec_first_dequeue_output_mutex;
     SDL_cond                 *acodec_first_dequeue_output_cond;
     volatile bool             acodec_first_dequeue_output_request;
+    bool                      aformat_need_recreate;
 
     SDL_mutex                *any_input_mutex;
     SDL_cond                 *any_input_cond;
@@ -151,6 +152,99 @@ static SDL_AMediaCodec *create_codec_l(JNIEnv *env, IJKFF_Pipenode *node)
     return acodec;
 }
 
+static int recreate_format_l(JNIEnv *env, IJKFF_Pipenode *node)
+{
+    IJKFF_Pipenode_Opaque *opaque         = node->opaque;
+    FFPlayer              *ffp            = opaque->ffp;
+    int                    rotate_degrees = 0;
+
+    ALOGI("AMediaFormat: %s, %dx%d\n", opaque->mcc.mime_type, opaque->codecpar->width, opaque->codecpar->height);
+    SDL_AMediaFormat_deleteP(&opaque->output_aformat);
+    opaque->input_aformat = SDL_AMediaFormatJava_createVideoFormat(env, opaque->mcc.mime_type, opaque->codecpar->width, opaque->codecpar->height);
+    if (opaque->codecpar->extradata && opaque->codecpar->extradata_size > 0) {
+        if ((opaque->codecpar->codec_id == AV_CODEC_ID_H264 || opaque->codecpar->codec_id == AV_CODEC_ID_HEVC)
+            && opaque->codecpar->extradata[0] == 1) {
+#if AMC_USE_AVBITSTREAM_FILTER
+            if (opaque->avctx->codec_id == AV_CODEC_ID_H264) {
+                opaque->bsfc = av_bitstream_filter_init("h264_mp4toannexb");
+                if (!opaque->bsfc) {
+                    ALOGE("Cannot open the h264_mp4toannexb BSF!\n");
+                    goto fail;
+                }
+            } else {
+                opaque->bsfc = av_bitstream_filter_init("hevc_mp4toannexb");
+                if (!opaque->bsfc) {
+                    ALOGE("Cannot open the hevc_mp4toannexb BSF!\n");
+                    goto fail;
+                }
+            }
+
+            opaque->orig_extradata_size = opaque->avctx->extradata_size;
+            opaque->orig_extradata = (uint8_t*) av_mallocz(opaque->avctx->extradata_size + FF_INPUT_BUFFER_PADDING_SIZE);
+            if (!opaque->orig_extradata) {
+                goto fail;
+            }
+            memcpy(opaque->orig_extradata, opaque->avctx->extradata, opaque->avctx->extradata_size);
+            for(int i = 0; i < opaque->avctx->extradata_size; i+=4) {
+                ALOGE("csd-0[%d]: %02x%02x%02x%02x\n", opaque->avctx->extradata_size, (int)opaque->avctx->extradata[i+0], (int)opaque->avctx->extradata[i+1], (int)opaque->avctx->extradata[i+2], (int)opaque->avctx->extradata[i+3]);
+            }
+            SDL_AMediaFormat_setBuffer(opaque->input_aformat, "csd-0", opaque->avctx->extradata, opaque->avctx->extradata_size);
+#else
+            size_t   sps_pps_size   = 0;
+            size_t   convert_size   = opaque->codecpar->extradata_size + 20;
+            uint8_t *convert_buffer = (uint8_t *)calloc(1, convert_size);
+            if (!convert_buffer) {
+                ALOGE("%s:sps_pps_buffer: alloc failed\n", __func__);
+                goto fail;
+            }
+            if (opaque->codecpar->codec_id == AV_CODEC_ID_H264) {
+                if (0 != convert_sps_pps(opaque->codecpar->extradata, opaque->codecpar->extradata_size,
+                                         convert_buffer, convert_size,
+                                         &sps_pps_size, &opaque->nal_size)) {
+                    ALOGE("%s:convert_sps_pps: failed\n", __func__);
+                    goto fail;
+                }
+            } else {
+                if (0 != convert_hevc_nal_units(opaque->codecpar->extradata, opaque->codecpar->extradata_size,
+                                                convert_buffer, convert_size,
+                                                &sps_pps_size, &opaque->nal_size)) {
+                    ALOGE("%s:convert_hevc_nal_units: failed\n", __func__);
+                    goto fail;
+                }
+            }
+            SDL_AMediaFormat_setBuffer(opaque->input_aformat, "csd-0", convert_buffer, sps_pps_size);
+            for(int i = 0; i < sps_pps_size; i+=4) {
+                ALOGE("csd-0[%d]: %02x%02x%02x%02x\n", (int)sps_pps_size, (int)convert_buffer[i+0], (int)convert_buffer[i+1], (int)convert_buffer[i+2], (int)convert_buffer[i+3]);
+            }
+            free(convert_buffer);
+#endif
+        } else {
+            // Codec specific data
+            // SDL_AMediaFormat_setBuffer(opaque->aformat, "csd-0", opaque->codecpar->extradata, opaque->codecpar->extradata_size);
+            ALOGE("csd-0: naked\n");
+        }
+    } else {
+        ALOGE("no buffer(%d)\n", opaque->codecpar->extradata_size);
+    }
+
+    rotate_degrees = ffp_get_video_rotate_degrees(ffp);
+    if (ffp->mediacodec_auto_rotate &&
+        rotate_degrees != 0 &&
+        SDL_Android_GetApiLevel() >= IJK_API_21_LOLLIPOP) {
+        ALOGI("amc: rotate in decoder: %d\n", rotate_degrees);
+        opaque->frame_rotate_degrees = rotate_degrees;
+        SDL_AMediaFormat_setInt32(opaque->input_aformat, "rotation-degrees", rotate_degrees);
+        ffp_notify_msg2(ffp, FFP_MSG_VIDEO_ROTATION_CHANGED, 0);
+    } else {
+        ALOGI("amc: rotate notify: %d\n", rotate_degrees);
+        ffp_notify_msg2(ffp, FFP_MSG_VIDEO_ROTATION_CHANGED, rotate_degrees);
+    }
+
+    return 0;
+fail:
+    return -1;
+}
+
 static int reconfigure_codec_l(JNIEnv *env, IJKFF_Pipenode *node, jobject new_surface)
 {
     IJKFF_Pipenode_Opaque *opaque   = node->opaque;
@@ -326,6 +420,58 @@ static int feed_input_buffer(JNIEnv *env, IJKFF_Pipenode *node, int64_t timeUs,
         av_packet_unref(&d->pkt);
         d->pkt_temp = d->pkt = pkt;
         d->packet_pending = 1;
+
+        if (opaque->codecpar->codec_id == AV_CODEC_ID_H264) {
+            uint8_t  *size_data      = NULL;
+            int       size_data_size = 0;
+            AVPacket *avpkt          = &d->pkt_temp;
+            size_data = av_packet_get_side_data(avpkt, AV_PKT_DATA_NEW_EXTRADATA, &size_data_size);
+            if (size_data && size_data_size > AV_INPUT_BUFFER_PADDING_SIZE) {
+                int             got_picture = 0;
+                AVFrame        *frame      = av_frame_alloc();
+                AVDictionary   *codec_opts = NULL;
+                const AVCodec  *codec      = opaque->decoder->avctx->codec;
+                AVCodecContext *new_avctx  = avcodec_alloc_context3(codec);
+                if (!new_avctx)
+                    return AVERROR(ENOMEM);
+
+                avcodec_parameters_to_context(new_avctx, opaque->codecpar);
+                av_freep(&new_avctx->extradata);
+                new_avctx->extradata = av_mallocz(size_data_size);
+                if (!new_avctx->extradata)
+                    return AVERROR(ENOMEM);
+                memcpy(new_avctx->extradata, size_data, size_data_size);
+                new_avctx->extradata_size = size_data_size;
+
+                av_dict_set(&codec_opts, "threads", "1", 0);
+                ret = avcodec_open2(new_avctx, codec, &codec_opts);
+                av_dict_free(&codec_opts);
+                if (ret < 0) {
+                    avcodec_free_context(&new_avctx);
+                    return ret;
+                }
+
+                ret = avcodec_decode_video2(new_avctx, frame, &got_picture, avpkt);
+                if (ret < 0) {
+                    avcodec_free_context(&new_avctx);
+                    return ret;
+                }
+
+                if (got_picture) {
+                    if (opaque->codecpar->width  != new_avctx->width &&
+                        opaque->codecpar->height != new_avctx->height) {
+                        ALOGW("AV_PKT_DATA_NEW_EXTRADATA: %d x %d\n", new_avctx->width, new_avctx->height);
+                        avcodec_parameters_from_context(opaque->codecpar, new_avctx);
+                        opaque->aformat_need_recreate = true;
+                        ffpipeline_set_surface_need_reconfigure_l(pipeline, true);
+                    }
+                }
+
+                av_frame_unref(frame);
+                avcodec_free_context(&new_avctx);
+            }
+        }
+
 #if AMC_USE_AVBITSTREAM_FILTER
         // d->pkt_temp->data could be allocated by av_bitstream_filter_filter
         if (d->bfsc_ret > 0) {
@@ -406,11 +552,22 @@ static int feed_input_buffer(JNIEnv *env, IJKFF_Pipenode *node, int64_t timeUs,
             new_surface = ffpipeline_get_surface_as_global_ref_l(env, pipeline);
             ffpipeline_unlock_surface(pipeline);
 
-            if (opaque->jsurface == new_surface ||
-                (opaque->jsurface && new_surface && (*env)->IsSameObject(env, new_surface, opaque->jsurface))) {
+            if (!opaque->aformat_need_recreate &&
+                (opaque->jsurface == new_surface ||
+                (opaque->jsurface && new_surface && (*env)->IsSameObject(env, new_surface, opaque->jsurface)))) {
                 ALOGI("%s: same surface, reuse previous surface\n", __func__);
                 J4A_DeleteGlobalRef__p(env, &new_surface);
             } else {
+                if (opaque->aformat_need_recreate) {
+                    ALOGI("%s: recreate aformat\n", __func__);
+                    ret = recreate_format_l(env, node);
+                    if (ret) {
+                        ALOGE("amc: recreate_format_l failed\n");
+                        goto fail;
+                    }
+                    opaque->aformat_need_recreate = false;
+                }
+
                 opaque->acodec_reconfigure_request = true;
                 SDL_LockMutex(opaque->acodec_mutex);
                 ret = reconfigure_codec_l(env, node, new_surface);
@@ -934,7 +1091,6 @@ IJKFF_Pipenode *ffpipenode_create_video_decoder_from_android_mediacodec(FFPlayer
     IJKFF_Pipenode_Opaque *opaque = node->opaque;
     JNIEnv                *env    = NULL;
     int                    ret    = 0;
-    int                    rotate_degrees = 0;
     jobject                jsurface = NULL;
 
     node->func_destroy  = func_destroy;
@@ -1048,86 +1204,10 @@ IJKFF_Pipenode *ffpipenode_create_video_decoder_from_android_mediacodec(FFPlayer
         goto fail;
     }
 
-    ALOGI("AMediaFormat: %s, %dx%d\n", opaque->mcc.mime_type, opaque->codecpar->width, opaque->codecpar->height);
-    opaque->input_aformat = SDL_AMediaFormatJava_createVideoFormat(env, opaque->mcc.mime_type, opaque->codecpar->width, opaque->codecpar->height);
-    if (opaque->codecpar->extradata && opaque->codecpar->extradata_size > 0) {
-        if ((opaque->codecpar->codec_id == AV_CODEC_ID_H264 || opaque->codecpar->codec_id == AV_CODEC_ID_HEVC)
-            && opaque->codecpar->extradata[0] == 1) {
-#if AMC_USE_AVBITSTREAM_FILTER
-            if (opaque->avctx->codec_id == AV_CODEC_ID_H264) {
-                opaque->bsfc = av_bitstream_filter_init("h264_mp4toannexb");
-                if (!opaque->bsfc) {
-                    ALOGE("Cannot open the h264_mp4toannexb BSF!\n");
-                    goto fail;
-                }
-            } else {
-                opaque->bsfc = av_bitstream_filter_init("hevc_mp4toannexb");
-                if (!opaque->bsfc) {
-                    ALOGE("Cannot open the hevc_mp4toannexb BSF!\n");
-                    goto fail;
-                }
-            }
-
-            opaque->orig_extradata_size = opaque->avctx->extradata_size;
-            opaque->orig_extradata = (uint8_t*) av_mallocz(opaque->avctx->extradata_size +
-                                                      FF_INPUT_BUFFER_PADDING_SIZE);
-            if (!opaque->orig_extradata) {
-                goto fail;
-            }
-            memcpy(opaque->orig_extradata, opaque->avctx->extradata, opaque->avctx->extradata_size);
-            for(int i = 0; i < opaque->avctx->extradata_size; i+=4) {
-                ALOGE("csd-0[%d]: %02x%02x%02x%02x\n", opaque->avctx->extradata_size, (int)opaque->avctx->extradata[i+0], (int)opaque->avctx->extradata[i+1], (int)opaque->avctx->extradata[i+2], (int)opaque->avctx->extradata[i+3]);
-            }
-            SDL_AMediaFormat_setBuffer(opaque->input_aformat, "csd-0", opaque->avctx->extradata, opaque->avctx->extradata_size);
-#else
-            size_t   sps_pps_size   = 0;
-            size_t   convert_size   = opaque->codecpar->extradata_size + 20;
-            uint8_t *convert_buffer = (uint8_t *)calloc(1, convert_size);
-            if (!convert_buffer) {
-                ALOGE("%s:sps_pps_buffer: alloc failed\n", __func__);
-                goto fail;
-            }
-            if (opaque->codecpar->codec_id == AV_CODEC_ID_H264) {
-                if (0 != convert_sps_pps(opaque->codecpar->extradata, opaque->codecpar->extradata_size,
-                                         convert_buffer, convert_size,
-                                         &sps_pps_size, &opaque->nal_size)) {
-                    ALOGE("%s:convert_sps_pps: failed\n", __func__);
-                    goto fail;
-                }
-            } else {
-                if (0 != convert_hevc_nal_units(opaque->codecpar->extradata, opaque->codecpar->extradata_size,
-                                                convert_buffer, convert_size,
-                                                &sps_pps_size, &opaque->nal_size)) {
-                    ALOGE("%s:convert_hevc_nal_units: failed\n", __func__);
-                    goto fail;
-                }
-            }
-            SDL_AMediaFormat_setBuffer(opaque->input_aformat, "csd-0", convert_buffer, sps_pps_size);
-            for(int i = 0; i < sps_pps_size; i+=4) {
-                ALOGE("csd-0[%d]: %02x%02x%02x%02x\n", (int)sps_pps_size, (int)convert_buffer[i+0], (int)convert_buffer[i+1], (int)convert_buffer[i+2], (int)convert_buffer[i+3]);
-            }
-            free(convert_buffer);
-#endif
-        } else {
-            // Codec specific data
-            // SDL_AMediaFormat_setBuffer(opaque->aformat, "csd-0", opaque->codecpar->extradata, opaque->codecpar->extradata_size);
-            ALOGE("csd-0: naked\n");
-        }
-    } else {
-        ALOGE("no buffer(%d)\n", opaque->codecpar->extradata_size);
-    }
-
-    rotate_degrees = ffp_get_video_rotate_degrees(ffp);
-    if (ffp->mediacodec_auto_rotate &&
-        rotate_degrees != 0 &&
-        SDL_Android_GetApiLevel() >= IJK_API_21_LOLLIPOP) {
-        ALOGI("amc: rotate in decoder: %d\n", rotate_degrees);
-        opaque->frame_rotate_degrees = rotate_degrees;
-        SDL_AMediaFormat_setInt32(opaque->input_aformat, "rotation-degrees", rotate_degrees);
-        ffp_notify_msg2(ffp, FFP_MSG_VIDEO_ROTATION_CHANGED, 0);
-    } else {
-        ALOGI("amc: rotate notify: %d\n", rotate_degrees);
-        ffp_notify_msg2(ffp, FFP_MSG_VIDEO_ROTATION_CHANGED, rotate_degrees);
+    ret = recreate_format_l(env, node);
+    if (ret) {
+        ALOGE("amc: recreate_format_l failed\n");
+        goto fail;
     }
 
     if (!ffpipeline_select_mediacodec_l(pipeline, &opaque->mcc) || !opaque->mcc.codec_name[0]) {
-- 
1.9.1

